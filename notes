check max_endstop config

Motor 3 --> enabled, gpio 8, min_endstop disabled
Motor 2 --> disabled, gpio 0, min_endstop disabled --> fixed
Motor 1 --> disabled, gpio 0, min_endstop disabled --> fixed 

error:

odrive0 was uncomnfigured!!!

convention:
limit axis 0 -- gpio 2
limit axis 1 -- gpio 8

Superstition:

it is recommended to wait 10 seconds before rebooting odrive after saving configuration
and waiting 5 seconds after to reconnect

gpio 13, 16, 20 on RPI for limit switches


switch to shorter cables

disable endstops on odrive, increase current limit

encoder mounting plate is extremely loose on motor 1. probably why it lost its index position.

position controll works on motor 2 and 3. need to find index before position control works


working settings: 
need to increase current to support weight of arm assembly
current_lim = 40
requested_current_range = 60
calibration_current = 25

if swingd back fast, change motor direction, possibly just reboot and try again.

homing function

switches need debounce? Arms are not rising to switches before it is triggered




add negative velocity control to RPiOdrive lib. -- its there but I cannot get it to work rn


ODRive gpio are 3.3v but 5v compliant. Encoders being powered off 5v can be a problem.

got all three motors homed with limit switch. after third homes, motors 1 and 2 give out. probasbly a current control problem

fix current control problem + tune pos_gain to remove vibrations


TODO:
create README documentation with ODrive info, commands and usage, etc
create config file of current ODrive config for future reference
setup pycharm with RPI - remote deployment
setup slack channel
(me) -- find new tablet or something to work with - stop using blake's tablet
note: since using rpi for stop switches, do not need new firmware
figure out how to use endstops with ODrive
figure out how to set a negative velocity

put ODrives on top of project
put power supply inside base of project
cable management

tighten all loose bolts
install missing bolts in arm
finalize mechanical
finalize electrical

finish homing function
test setting three positions at once, one per motor
tune current settings
tune proportional control values -- stop wobble and get faster response
lots of testing

implement kinematics and verfy working with joystick control test program
modularize code and create delta-arm class/API
DONE HARDWARE PROGRAMING

install UI on RPi and test displays
install hardware backend delta-arm API into UI front end code
lots of testing and iterative modifications

